{
  "hash": "63ff82fdd4cb4fa882aac05c64123b7b",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"SQL入門1\"\nauthor: \"坂本航太\"\ncategories: [SAS,解析プログラミング]\ndate-modified: \"2025-06-15\"\nabstract-title: Abstract\nabstract: \"\"\ndate: \"2025-06-15\"\nengine: knitr\nformat:\n  html: \n    fontsize: normal\n    page-layout: full\n    lang: \"ja\"\n    encoding: \"UTF-8\"\n    toc: true\n    toc-depth: 2\n    code-fold: show\n    html-math-method: katex\n    fig-format: svg\n    fig-height: 5\n    fig-width: 9\n    self-contained: true\n    number-sections: true\n    code-block-border-left: true\n    code-line-numbers: false\n    code-overflow: wrap\n    highlight-style: atom-one\n    df-print: tibble\n#   pdf:\n#     documentclass: bxjsarticle\n#     classoption: \n#       - xelatex\n#       - ja=standard\n#     pdf-engine: xelatex\n#     mainfont: \"Times New Roman\"\n#     sansfont: \"Times New Roman\"\n#     monofont: \"Courier New\"\n#     CJKmainfont: \"MS Mincho\"  \n#     CJKsansfont: \"MS Gothic\" \n#     toc: true\n#     toc-depth: 2\n#     number-sections: true\n#     colorlinks: true\n#     keep-tex: true\neditor: visual\n---\n\n# SASによるProc SQL入門1\n\n本記事では、SASによる`Proc SQL Procedure`について解説する。参考文献は以下の通りである。\n\n## 参考文献\n\n-   [2022年度SASユーザー総会：臨床試験のデータハンドリングとSQLプロシジャ](https://www.sas.com/ja_jp/events/21/users-group-2021/sessions.html#m=l3-5)\n-   2007年度SASユーザー総会：臨床試験データの加工におけるSAS/Proc SQL の活用事例：データセット併合と図表作成\n-   2007年度SASユーザー総会：SQL プロシジャの利用－安全性の集計を題材に－\n-   2016年度：データハンドリングにおけるSQLプロシジャの利活用 -PROC SQL入門ー\n-   \n\n# SASデータ処理の選択肢を広げる：Proc SQLの活用メリット\n\n製薬業界での臨床試験データ解析において、Data Stepに加えてProc SQLという選択肢を持つことで、より効率的なデータ処理が可能になります。\n\n-   **利点1：併合する各々のデータセットを事前にソートしておく必要がない**\n-   **利点2：データセットの併合と同時にデータをソートすることが可能である**\n-   **利点3：データセットを併合する際に、同じ変数名が存在する場合、単純にデータを上書きしてしまうことはない**\n-   **利点4：集計するための関数を用いることで個々の測定値とオブザベーション方向の平均値を比較することが可能である**\n\n## 利点1：事前ソートが不要\n\n**Data Stepの場合：**\n\n```         \n/* 各データセットを事前にソートする必要がある */\nproc sort data=dataset1; by id; run;\nproc sort data=dataset2; by id; run;\ndata merged;\n    merge dataset1 dataset2;\n    by id;\nrun;\n```\n\n**Proc SQLの場合：**\n\n```         \n/* ソート不要で直接結合可能 */\nproc sql;\n    create table merged as\n    select * from dataset1 a\n    left join dataset2 b\n    on a.id = b.id;\nquit;\n```\n\n## 利点2：併合と同時にソートが可能\n\n**Proc SQLでは、order byを用いることにより、データセットの併合と同時にデータをソートすることが可能である。そのため、データセットの併合後にProc sortで改めてソートすることはせずに、Proc SQLのみで目的に応じた並び順にすることが可能である。**\n\n```         \nproc sql;\n    create table result as\n    select * from dataset1 a\n    left join dataset2 b\n    on a.id = b.id\n    order by id, visit_date;  /* 結合と同時にソート */\nquit;\n```\n\n## 利点3：同名変数の上書き回避\n\n**Data Stepの問題：** 併合前の2つのデータセットに同じ変数名が存在する場合、データステップでマージするとその変数名のデータは上書きされてしまう\n\n**Proc SQLの解決策：**\n\n```         \n/* 表4.1.5のような状況での外部結合 */\nproc sql;\n    create table result as\n    select a.subject_id, a.sex as patient_sex, a.test_code, a.value,\n           b.sex as reference_sex, b.lower_limit, b.upper_limit\n    from measurement_data a\n    left join reference_data b\n    on a.test_code = b.test_code\n    and (b.sex = '.' or a.sex = b.sex);\nquit;\n```\n\n基準値データセットに「性別」のデータが存在し、かつ測定値データセットの「性別」と他の異なるオブザベーションは結合データセットから削除される\n\n## 利点4：集計関数による個別値と平均値の比較\n\n**従来の方法の問題：** 従来方向のデータの平均値を求めることは、SAS関数のmeanを用いることでデータステップでも可能である。しかし、オブザベーション方向のデータの平均値を求めるためには、Proc MEANSなどの別のプロシジャを用いる必要がある。また、retainステートメントを用いたオブザベーション方向の累計の計算により、データステップでもオブザベーション方向の平均値を求めることは可能であるが、個々の測定値と求めた平均値を比較するためには別工程の処理が必要である。\n\n**Proc SQLの解決策：**\n\n```         \nproc sql;\n    create table comparison as\n    select subjid, paramcd, value,\n           mean(value) as group_mean,\n           value - mean(value) as deviation_from_mean\n    from lab_data\n    group by paramcd;\nquit;\n```\n\nそれに対して、Proc SQLでは、集計するための関数を用いることで、**個々の測定値とオブザベーション方向の平均値を比較することが可能となる。**\n\n# Proc SQL構文について\n\n## 基本構文\n\n1つのデータセットを加工して、1つのデータセットを作成する場合の基本的なProc SQLの構文：他にも諸々の指定ができるが、基礎的な事項は以下の通りである。\n\n```         \nProc SQL ;\n    create table 作成データセット名    as\n    select      元のデータセット名.変数名1,\n                元のデータセット名.変数名2    as  変更後の変数名2\n    from        元のデータセット名\n    where       データ抽出の条件1\n    group by    グループ分け\n    having      データ抽出の条件2\n    order by    ソート変数\n;\n```\n\n複数SQLステートメントのまとめ書き\n\n```         \nproc sql <オプション> ;\n    sqlステートメント1 ;\n    sqlステートメント2 ;\n    sqlステートメント3 ;\n;\nquit;\n```\n\n## 各構文要素の説明\n\n### `create table 作成データセット名 as`\n\n作成するデータセットの名称を定義する。\n\n### `select`\n\n```         \nselect  元のデータセット名.変数名1,\n        元のデータセット名.変数名2 as 変更後の変数名2\n```\n\n-   作成するデータセットに保存する変数を定義する（データステップでは`keep`ステートメントに相当）\n\n-   元のデータセットにおける変数名を指定した後に「`as`」を加え、変更後の変数名を記載することで、作成するデータセットに保存する変数の変数名を変更することが可能（データステップでは`rename`ステートメントに相当）\n\n-   基本的に作成するデータセットに保存する全ての変数を定義する必要がある\n\n-   元のデータセットに存在する全ての変数をそのまま用いる場合には「`*`」で代用することも可能\n\n-   定義された変数名の順でデータセットが作成されるため、変数の並び順を変更することが簡単\n\n### `from 元のデータセット名`\n\n元のデータセットを指定する（データステップでは`set`ステートメントに相当）。\n\n### `where データ抽出の条件1`\n\n元のデータセットからデータを抽出する条件を指定する。\n\n### `group by グループ分け`\n\n集計する場合などの状況においてグループ分けの条件を設定する。\n\n### `having データ抽出の条件2`\n\n元のデータセットからデータを抽出する条件を指定する。集計するための関数を利用して条件を指定する場合には、「`where`」ではなく「`having`」で指定する。\n\n### `order by ソート変数`\n\nデータのソートに用いる変数を指定する。Proc SQLでは、データセット作成と同時にデータをソートすることが可能である。\n\n## Data Stepとの比較\n\n上記のProc SQLで作成したプログラムをデータステップおよびProc SQL以外のプロシジャで作成する場合：\n\n```         \nData 作成データセット名 ;\n    set 元のデータセット名 ;\n    where       データ抽出の条件1 ;\n    rename      変数名2 = 変更後の変数名2 ;\n    keep        変数名1  変更後の変数名2 ;\n    if          データ抽出の条件2 ;\nrun ;\n\nProc sort data=作成データセット名 ;\n    by ソート変数 ;\nrun ;\n```\n\n## Proc SQLの利点\n\n-   **複数の工程を1工程にまとめられる**：プログラム作成においてエラーを少なくするという利点がある\n\n-   **変更箇所の特定が容易**：変更箇所を見つけやすいため、変数名の変更や条件の変更を行なう際に変更漏れを少なくするという利点がある\n\n-   **統一された記法**：Proc SQLでは「`Proc SQL;`」～「`quit`」、データステップでは「`Data`」～「`run;`」、Proc SQL以外のプロシジャでは「`Proc`」～「`run;`」を1工程と表現する\n\n# 各Statementの使い方について\n\n\n::: {.cell}\n\n```{.markdown .cell-code}\n/* 付録. SAS プログラム (SAS Ver 9.1 日本語版) */\n\n/* 利用するフォーマットの指定 */\nproc format ;\n    value LBTEST    1 = \"総コレステロール\"\n                    2 = \"LDLコレステロール\"  \n                    3 = \"HDLコレステロール\"\n                    4 = \"中性脂肪\"         ;\n    value SEX       1 = \"M\"\n                    2 = \"F\"                ;\nrun ;\n\n/* 測定値データの発生 */\ndata WORK1 ;\n    label ID = \"被験者\" SEX = \"性別\" LBTESTCD = \"項目番号\" LBTEST = \"項目名\" VALUE = \"測定値\" ;\n    do ID = 1 to 10000 ;\n        SEX = put(ranbin(12345, 1, 0.5) + 1, SEX.) ;\n        do LBTESTCD = 1, 4, 3, 2 ;\n            LBTEST = put(LBTESTCD, LBTEST.) ;\n            do WEEK = 0, 8, 16, 24 ;\n                if LBTESTCD = 1 then VALUE = round(250 - 2  * week + rannor(3568*week) + 10 * rannor(9856) ) ;\n                if LBTESTCD = 2 then VALUE = round(150 - 0.3 * week + rannor(6325*week) + 8 * rannor(1352) ) ;\n                if LBTESTCD = 3 then VALUE = round( 30 + 0.1 * week + rannor(6932*week) + 5 * rannor(8256) ) ;\n                if LBTESTCD = 4 then VALUE = round(180 - 1.2 * week + rannor(1529*week) + 11 * rannor(4526) ) ;\n                output ;\n            end ; end ; end ;\nrun ;\n\n/* 基準値データ */\ndata NORM ;\n    input LBTESTCD SEX $ LO_NRM HI_NRM ;\n    label LBTESTCD = \"項目番号\" SEX = \"性別\" LO_NRM = \"下側基準値\" HI_NRM = \"上側基準値\" ;\ncards ;\n1  .  150  220\n4  .   50  145\n2  .   70  130\n3  M   40   85\n3  F   40   95\n;\nrun ;\n\n/* 事例1：ソートされていないつのデータセットを結合する */\n\n/***** データステップを用いる場合 *****/\nProc SORT data=WORK1 out=DATAS1 ;\n    by LBTESTCD SEX ;\nrun ;\ndata DATAS2a ; set NORM ;\n    /* 性別のところに基準値が入い場合にデータを作成する。面倒には違 */\n    if SEX not in (\"\", \".\") then output ;\n    else        do SEX = \"M\", \"F\" ; output ; end ;\nrun ;\nProc SORT data=DATAS2a out=DATAS2 ;\n    by LBTESTCD SEX ;\nrun ;\ndata DATAS3 ; merge DATAS1 DATAS2 ;\n    by LBTESTCD SEX ;\nrun ;\nProc SORT data=DATAS3 out=DATAS4 ;\n    by ID LBTESTCD WEEK ;\nrun ;\n\n/***** Proc SQL を用いる場合 *****/\nProc SQL ;\n    create table SQL1 as                                    /* 作成するデータセット名を指定 */\n    select  WORK1.ID,\n            WORK1.SEX,\n            WORK1.LBTESTCD,\n            WORK1.LBTEST,\n            WORK1.WEEK,\n            WORK1.VALUE,\n            NORM.LO_NRM,\n            NORM.HI_NRM                                     /* 作成する項目名を指定 */\n    from    WORK1 left join NORM                           /* WORK1にNORMを条件付で結合する */\n    on      WORK1.LBTESTCD = NORM.LBTESTCD                 /* 項目のコードが一致する場合 */\n    where   NORM.SEX in (\"\", \".\") or\n            WORK1.SEX = NORM.SEX                           /* 基準値で性別が無い、性別ごとのデータを結合する */\n    order by ID, LBTESTCD, WEEK                            /* データセット作成と同時にデータを並び替える */\n    ;\nquit ;\n\nProc COMPARE BASE=SQL1 COMPARE=DATAS4 ;\n    title \"事例1：Proc SQLを用いて作成したデータセットとデータステップで作成したデータセットの比較\" ;\nrun ; title ;\n\n/* 事例2：関数時の測定値から算出されたサブグループ集団のデータを抽出する */\n\n/***** データステップを用いる場合 *****/\nProc SORT data=WORK1 out=DATAS11 ;\n    by ID LBTESTCD WEEK ;\nrun ;\n/* 関数時データから各平均値を求める */\nProc MEANS data=WORK1 ;\n    where   LBTESTCD = 1 and WEEK = 0 ;                   /* 関数時の総コレステロール値でサブグループを対象 */\n    by      LBTESTCD ;\n    var     VALUE ;\n    output out=PMEAN mean=MEAN ;                           /* 各にデータセットを作成 */\nrun ;\ndata null ; set PMEAN ;\n    call symput(\"PMEAN\", MEAN) ;                          /* 条件に用いる値をマクロ変数としてデータ化 */\nrun ;\ndata SUBJ ; set DATAS11 ;\n    where   LBTESTCD = 1 and WEEK =0 ;                    /* 関数時の総コレステロール値のデータのみを抽出 */\n    by      LBTESTCD ;\n    if      WEEK = 0 and VALUE > &PMEAN ;                 /* 関数時の測定値が平均値より大きい被験者の件数 */\nrun ;\ndata DATAS12 ; merge DATAS11 SUBJ(keep=ID in=a) ;\n    by ID ;\n    if a ;                                                /* inデータセットオプションで必要な被験者のみを特定 */\nrun ;\nProc SORT data=DATAS12 out=DATAS13 ;\n    by LBTESTCD ID WEEK ;                                 /* 利用する順番でソート */\nrun ;\n\n/***** Proc SQL を用いる場合 *****/\nProc SQL ;\n    create table SQL11 as                                 /* 作成するデータセットを指定 */\n    select  WORK1.ID,\n            WORK1.SEX,\n            WORK1.LBTESTCD,\n            WORK1.LBTEST,\n            WORK1.WEEK,\n            WORK1.VALUE                                   /* 作成する項目名を指定 */\n    from    WORK1\n    where   ID in\n            (select ID                                    /* 抽出する被験者を指定 */\n             from   WORK1\n             where  WEEK = 0 and LBTESTCD = 1            /* 抽出する条件を指定 */\n             having VALUE > avg(VALUE) )                  /* 抽出する条件を指定 */\n    order by LBTESTCD, ID, WEEK\n    ;\nquit ;\n\nProc COMPARE BASE=SQL11 COMPARE=DATAS13 ;\n    title \"事例2：Proc SQLを用いて作成したデータセットとデータステップで作成したデータセットの比較\" ;\nrun ; title ;\n\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}
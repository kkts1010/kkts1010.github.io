{
  "hash": "c53a6d3bc46ac76f16413d1a850fc039",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Markdown記法について\"\nauthor: \"坂本航太\"\ncategories: [Markdown]\ndate-modified: \"2025-06-15\"\nabstract-title: Abstract\nabstract: \"\"\ndate: \"2025-06-15\"\nformat:\n  html: \n    fontsize: normal\n    page-layout: full\n    lang: \"ja\"\n    encoding: \"UTF-8\"\n    toc: true\n    toc-depth: 2\n    code-fold: show\n    html-math-method: katex\n    fig-format: svg\n    fig-height: 5\n    fig-width: 9\n    self-contained: true\n    number-sections: true\n    code-block-border-left: true\n    code-line-numbers: false\n    code-overflow: wrap\n    highlight-style: atom-one\n    df-print: tibble\neditor: visual\n---\n\n# Markdown記法\n\nR Quartoでは、Markdownを使って文書を作成し、Rコードと組み合わせて美しいレポートや論文を生成できます。本記事では、Quarto環境で効果的に使えるMarkdown記法を体系的に解説します。\n\n## 参考文献\n\n-   [私たちのR　再現可能な研究24.Quarto［基礎］](https://www.jaysong.net/RBook/quarto1.html)\n-   [私たちのR　再現可能な研究25.Quarto［文書］](https://www.jaysong.net/RBook/quarto2.html)\n-   [私たちのR　再現可能な研究25.Quarto［スライド］](https://www.jaysong.net/RBook/quarto3.html)\n-   [私たちのR　Appendix F — R Markdown \\[基礎\\]](https://www.jaysong.net/RBook/rmarkdown.html)\n-   [私たちのR　Appendix G — R Markdown \\[応用\\]](https://www.jaysong.net/RBook/rmarkdown2.html)\n-   [私たちのR　Appendix H — Quarto入門](https://www.jaysong.net/RBook/quarto.html)\n\n## Markdownとは何か\n\nMarkdownは、プレーンテキストで記述した文書を構造化された文書に変換するためのマークアップ言語です。R Quartoでは、このMarkdownとRコードを組み合わせて、データ分析レポートや学術論文を作成できます。\n\n### Markdownの主な特徴\n\n-   **可読性が高い**：マークアップが最小限で、プレーンテキストでも内容が理解しやすい\n\n-   **学習コストが低い**：基本的な記法は数時間で習得可能\n\n-   **Quartoとの親和性**：Rコードチャンクとシームレスに統合\n\n-   **多様な出力形式**：HTML、PDF、Word、PowerPointなど\n\n## コードの記述方法\n\n### コードブロック\n\nコードを美しく表示するには、バッククオート3つ（\\`\\`\\`）でコードを囲みます。 これだけだとSAS/Rに限らず、プログラムは実行はされないが、サンプルとして提示する際に便利である。\n\n```         \n# Rコードの例\nlibrary(ggplot2)\nlibrary(dplyr)\n\n# データの読み込みと前処理\ndata <- mtcars %>%\n  mutate(efficiency = ifelse(mpg > 20, \"High\", \"Low\"))\n\n# 散布図の作成\nggplot(data, aes(x = wt, y = mpg, color = efficiency)) +\n  geom_point(size = 3) +\n  geom_smooth(method = \"lm\") +\n  labs(title = \"車重と燃費の関係\",\n       x = \"車重 (1000 lbs)\",\n       y = \"燃費 (mpg)\")\n```\n\nQuartoでRプログラムも実行させたい場合は以下のように記載する。なお、SASは実行させない前提とする。 なお、SASの設定環境をQuartoに構築したらSASも実行可能である。\n\nプログラムも実行させるには、バッククオート3つ（\\`\\`\\`）でコードを囲み、`{r}`と書く。そうすると、Rプログラムの実行できる。\n\nオプションとしてRプログラムを非表示にしたり、表や図を表示する際は、2つの図表を横に並べたりとオプションは様々ある。それらは、[こちら](https://t-arae.blog/posts/2024/2024-07-22-quarto-tips/)のブログを参考にしていただきたい。デフォルトではプログラムが表示されてしまうので、非表示にする場合は、\n\n\n::: {.cell}\n\n```{.r .cell-code}\n1+1\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 2\n```\n\n\n:::\n:::\n\n\n**Quartoでの頻用するであろうオプション記法：**\n\n### `#| eval: true`\n\n-   **実行制御**：このコードを実際に実行するかを指定\n\n-   `true`：コードを実行する（デフォルト）\n\n-   `false`：コードを実行せず、表示のみ\n\n### `#| output: asis`\n\n-   **出力形式**：コードの実行結果をそのまま（as-is）出力\n\n-   通常はコードの出力結果が整形されますが、`asis`では生の形式で出力\n\n-   HTMLタグやMarkdown記法をそのまま文書に挿入したい場合に使用\n\n### `#| code-fold: true`\n\n-   **コード表示制御**：コードブロックを折りたたみ状態で表示する\n\n-   `true`：コードを折りたたんで、クリック可能なボタンで展開\n\n-   `false`：コードを通常通り表示（デフォルト）\n\n-   読者が必要に応じてコードの詳細を確認できる柔軟性を提供\n\n### `#| code-summary: \"データ処理コードを表示\"`\n\n-   **折りたたみボタンのラベル**：折りたたまれたコードを展開するボタンのテキストを設定\n\n-   デフォルトでは「Show code」や「コードを表示」が表示される\n\n-   カスタムテキストで、そのコードブロックの内容を説明できる\n\n-   絵文字や詳細な説明文を使用して、読みやすさを向上させる\n\n以下のプログラムを回すと、その下の結果が得らえる。プログラムが表示されないので結果だけを提示する際には有用である。\n\n```         \n#| eval: true\n#| output: asis\n#| code-fold: true\n#| code-summary: \"Show Code\"\n\n1 + 1\n```\n\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show Code\"}\n1 + 1\n```\n\n[1] 2\n\n### 実践的な例（インラインコード）\n\n本文中にRの結果を直接入れることができます！これをインラインコードと呼びます。 \"r 引数\"で本文中に簡単にRの出力結果を入れることができる。これは論文作成の文章案を作成するときに便利であろう。\n\n以下のように書くことでできます。普通はRチャンクで計算したものを引用するのがよいだろう。\n\n```         \n年齢の平均は r mean(mtcars$mpg) です。\nサンプルサイズは r nrow(mtcars) でした。\n最大値は r max(mtcars$hp) 馬力です。\n```\n\n年齢の平均は 20.090625 です。 サンプルサイズは 32 でした。 最大値は 335 馬力です。\n\n### 記述統計の埋め込み\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# データの事前計算\nmean_age <- round(mean(mtcars$mpg), 1)\nsd_age <- round(sd(mtcars$mpg), 2)\nn_cars <- nrow(mtcars)\n```\n:::\n\n\nここで、上で事前にRチャンクで計算をしておく。今回は練習のためプログラムを表示しているが、Rプログラムを非表示にしてもよいだろう。記載としては以下のように書けばよい。\n\n\n::: {.cell}\n\n```{.markdown .cell-code}\n本研究では `r n_cars` 台の自動車を分析しました。\n燃費の平均は `r mean_age`mpg（標準偏差 = `r sd_age`）でした。\n```\n:::\n\n\n上記のように書くとこのように出力できる。\n\n本研究では 32 台の自動車を分析しました。\n\n燃費の平均は 20.1mpg（標準偏差 = 6.03）でした。\n\n## 改行\n\nMarkdownにおける改行はやや特殊だ。特殊といっても難しいことはない。普段よりもう一行改行するだけだ。Markdownの場合、1回の改行は改行として判定されず、同じ行の連続と認識する。結構難しい。\n\n文章1 文章2\n\n文章1\n\n文章2\n\n## URLの挿入\n\nWebページを作成する際、ブラウザが理解できる言語がHTMLです。例えば、ブログ記事でリンクを作成したい場合、HTMLでは以下のように記述します：文章中に簡単にURLを参照できます。\n\n例：[私のブログ](https://example-blog.com)\n\n```         \n[私のブログ](https://example-blog.com)\n```\n\nまた、以下のように{}内に.externalを付けると、リンクのテキストの右側にアイコンを付く。\n\n```         \n[私のブログ](https://example-blog.com){.external target=\"_blank\"}\n```\n\n例：[私のブログ](https://example-blog.com){.external target=\"_blank\"}\n\n## インラインコード\n\n文章中でコードや関数名を表示する場合は、バッククオート1つで囲みます。単純にかっこいい。\n\n例：`ggplot()`関数や`dplyr::filter()`を使用してデータを処理します。平均値は`mean()`で計算できます。\n\n## 見出しと文書構造\n\n### 見出しの階層\n\n見出しは`#`の数で階層を表現します。学術文書では、適切な階層構造が重要です。 ちなみに`#`は6つまで使える。\n\n```         \n# 1. はじめに（H1）\n## 1.1 研究背景（H2）\n### 1.1.1 先行研究（H3）\n#### データの特徴（H4）\n##### 変数の詳細（H5）\n###### 補足事項（H6）\n```\n\n## テキストの装飾とフォーマット\n\n### 基本的な装飾\n\n-   **重要な結果**：`**重要な結果**`\n\n-   *統計的有意*：`*統計的有意*`\n\n-   ~~仮説は棄却~~：`~~仮説は棄却~~`\n\n-   アンダーライン：<u>アンダーライン</u>はHTMLタグを使う。\n\n## リストとチェックボックス\n\n### 順序なしリスト\n\n\\`-\\`を書いて、blankを入れるだけで順序なしリストができます。\n\n```         \n- データ収集\n  - アンケート調査\n  - 実験データ\n  - 公開データセット\n- データ前処理\n  - 欠損値処理\n  - 外れ値検出\n  - 変数変換\n- 分析手法\n  - 記述統計\n  - 回帰分析\n  - 機械学習\n```\n\n結果：\n\n-   データ収集\n\n    -   アンケート調査\n\n    -   実験データ\n\n    -   公開データセット\n\n-   データ前処理\n\n    -   欠損値処理\n\n    -   外れ値検出\n\n    -   変数変換\n\n-   分析手法\n\n    -   記述統計\n\n    -   回帰分析\n\n    -   機械学習\n\n### 番号付きリスト\n\n普通に`1.`みたいにかけばよいだけ。単純。`.`の付け忘れに注意しよう！\n\n```         \n1. 研究目的の設定\n2. データ収集計画の策定\n   1. サンプルサイズの決定\n   2. 測定項目の選択\n   3. 倫理的配慮\n3. データ収集の実施\n4. 統計解析\n5. 結果の解釈\n6. 考察と結論\n```\n\n## 画像の挿入\n\nQuartoで画像を入れるには`![代替テキスト](ファイルのパス名 or URL)`と入力します。`[代替テキスト]`は画像を読み込めなかった場合のテキストを意味します。これは画像が読み込めなかった場合の代替テキストでもあるが、視覚障害者用のウェブブラウザーのためにも使われる。これらのウェブブラウザーはテキストのみ出力されるものが多く、画像の代わりには代替テキストが読み込まれる。\n\n例えば、Figsフォルダー内の`ex.png`というファイルを読み込むとしたら以下のように書く。\n\n```         \n![画像](Figs/ex.png)\n```\n\n### 基本的なパス指定\n\n相対パス（推奨）が最も一般的で推奨される方法です。Quartoファイル（.qmd）からの相対位置で指定します。以下のように結果の図を記載するのが楽であろう。絶対パスでも可能であるが、あまりお勧めはできない。\n\n```         \n#相対パス\n![図1: データの分布](images/distribution.png)\n![図2: 回帰分析結果](figs/regression_plot.png)\n![図3: 比較グラフ](../shared_images/comparison.png)\n\n#絶対パス\n![画像](/Users/username/Documents/project/images/plot.png)\n![Windows例](C:\\Users\\username\\Documents\\project\\images\\plot.png)\n```\n\n## 脚注\n\n脚注は\\[\\^固有識別子\\]と\\[\\^固有識別子\\]: 脚注内容の2つの要素が必要だ。まず、文末脚注を入れる箇所に\\[\\^xxxx\\]を挿入する。xxxxは任意の文字列で構わない。しかし、同じQuarto文書内においてこの識別子は被らないようにすること。実際の脚注の内容は\\[\\^xxxx\\]: 内容のように入力する。これはどこに位置しても構わない。文書の途中でも、最後に入れても、脚注の内容は文末に位置する。ただし、脚注を入れる段落のすぐ後の方が作成する側としては読みやすいだろう。\n\n```         \n統計的有意性[^1]は重要な概念ですが、効果量[^2]も同様に考慮すべきです。\n\n[^1]: p値が設定した有意水準（通常0.05）を下回ること。\n\n[^2]: 統計的有意性とは独立した、実際的な重要性を示す指標。\n```\n\n統計的有意性[^1]は重要な概念ですが、効果量[^2]も同様に考慮すべきです。\n\n[^1]: p値が設定した有意水準（通常0.05）を下回ること。\n\n[^2]: 統計的有意性とは独立した、実際的な重要性を示す指標。\n\n## テーブルの活用\n\nテーブルを自分で書くことはないと思う。生成AIに書いてもらおう。Rでもkableを使えば出てくる。\n\n### 基本的なテーブル\n\n```         \n| 変数名 | データ型 | 欠損値 | 説明 |\n|:-------|:---------|:------:|:-----|\n| age | numeric | 0 | 年齢（歳） |\n| gender | factor | 2 | 性別（M/F） |\n| income | numeric | 15 | 年収（万円） |\n| education | factor | 3 | 教育レベル |\n```\n\n結果：\n\n| 変数名    | データ型 | 欠損値 | 説明         |\n|:----------|:---------|:------:|:-------------|\n| age       | numeric  |   0    | 年齢（歳）   |\n| gender    | factor   |   2    | 性別（M/F）  |\n| income    | numeric  |   15   | 年収（万円） |\n| education | factor   |   3    | 教育レベル   |\n\nRでの例\n\n\n::: {#tbl-basic .cell tbl-cap='mtcarsデータの基本統計量'}\n\n```{.r .cell-code}\nlibrary(knitr)\nkable(head(mtcars))\n```\n\n::: {.cell-output-display}\n\n\n|                  |  mpg| cyl| disp|  hp| drat|    wt|  qsec| vs| am| gear| carb|\n|:-----------------|----:|---:|----:|---:|----:|-----:|-----:|--:|--:|----:|----:|\n|Mazda RX4         | 21.0|   6|  160| 110| 3.90| 2.620| 16.46|  0|  1|    4|    4|\n|Mazda RX4 Wag     | 21.0|   6|  160| 110| 3.90| 2.875| 17.02|  0|  1|    4|    4|\n|Datsun 710        | 22.8|   4|  108|  93| 3.85| 2.320| 18.61|  1|  1|    4|    1|\n|Hornet 4 Drive    | 21.4|   6|  258| 110| 3.08| 3.215| 19.44|  1|  0|    3|    1|\n|Hornet Sportabout | 18.7|   8|  360| 175| 3.15| 3.440| 17.02|  0|  0|    3|    2|\n|Valiant           | 18.1|   6|  225| 105| 2.76| 3.460| 20.22|  1|  0|    3|    1|\n\n\n:::\n:::\n\n\n## 引用とノート\n\n### 引用\n\n```         \n> 統計学における最も重要な概念の一つは、\n> サンプルから母集団について推論を行うことである。\n> この過程では、不確実性を適切に評価することが不可欠である。\n> \n> > データは語るが、解釈は人間が行うものである。\n```\n\n結果：\n\n> 統計学における最も重要な概念の一つは、 サンプルから母集団について推論を行うことである。 この過程では、不確実性を適切に評価することが不可欠である。\n>\n> > データは語るが、解釈は人間が行うものである。\n\n## 数式の表示\n\nGFMは数式に対応していないが、`$数式$`でインライン数式を埋め込むことができる。Quartoの数式はMathJaxと呼ばれるJavaScriptのライブラリによってレンダリングされる。このMathJaxライブラリはHTMLにデフォルトで埋め込まれるわけではではないため、インターネットに接続せずにHTMLファイルを開くと数式が正しく出力されないため、インターネット接続を忘れないこと。MathJaxの記法は とほぼ変わらない。Texでの数式の書き方は別途まとめる。\n\n### インライン数式\n\n```         \n回帰係数は $\\beta_1 = 0.73$ で統計的に有意でした（$p < 0.001$）。 決定係数は $R^2 = 0.85$ でした。\n```\n\n表示は以下の通り。\n\n回帰係数は $\\beta_1 = 0.73$ で統計的に有意でした（$p < 0.001$）。 決定係数は $R^2 = 0.85$ でした。\n\n### 独立した数式表示\n\n数式を独立した行として出力する場合は、$の代わりに$\\$を使用する。\n\n```         \n$$\ny_i \\sim \\mbox{Normal}(X \\beta, \\sigma).\n$$\n```\n\n$$\ny_i \\sim \\mbox{Normal}(X \\beta, \\sigma).\n$$\n\n### ブロック数式\n\nもし数式が複数の行で構成されている場合は\\$\\$内にaligned環境`（\\begin{aligned}〜\\end{aligned}）`を使用する。むろん、 Latexと記法は同じだ。\n\n```         \n\\begin{align}\nY_i &= \\beta_0 + \\beta_1 X_{1i} + \\beta_2 X_{2i} + \\epsilon_i \\\\\n\\epsilon_i &\\sim N(0, \\sigma^2) \\\\\n\\hat{\\beta}_1 &= \\frac{\\sum_{i=1}^{n}(X_i - \\bar{X})(Y_i - \\bar{Y})}{\\sum_{i=1}^{n}(X_i - \\bar{X})^2}\n\\end{align}\n```\n\n複数の行にわたる数式の書き方\n\n$$\n\\begin{aligned}\n  Y_i      & \\sim \\text{Bernoulli}(\\theta_i), \\\\\n  \\theta_i & = \\text{logit}^{-1}(y_i^*), \\\\\n  y_i^*    & = \\beta_0 + \\beta_1 x_1 + \\beta_2 z_1.\n\\end{aligned}\n$$\n\n## Quart内でのコメントアウト\n\nRの場合、#でコメントを付けられるように、Quartoでもコメントを付けることができる。とりあえず書いたが要らなくなった段落や文章があって、消すことがもったいない場合はコメントアウトするのも1つの方法だろう。ただし、Rのように#は使えない。なぜなら#は見出しを意味する体。QuartoのコメントはHTMLと同様、<!--と-->で囲まれた領域がコメント扱いとなり、レンダリングに影響を与えない。\n\n例\n\n```         \n文章1\n\n<!--\nここはコメントです。\n-->\n\n文章2\n```\n\n## QuartoにおけるRコードの挿入と活用法\n\nQuartoを使う意義 以上の内容まで抑えると、Quartoを使って、簡単な文法のみで構造化された文書が作成できるでしょう。しかし、これまでの内容はQuartoの良さではなく、Markdownの良さです。別にQuartoでなくても、TyporaやGhostwriterのようなMarkdownエディターを使えば良いでしょう。Quartoを使う真の意義は、**文章とコード、結果**が統合されることです。それではQuarto文書にRコードを入れる方法について解説します。 チャンク（Chunk） Quarto文書にRコードを入れる方法は2つあります：\n\n1.  チャンクにRコードを入れる方法\n2.  インラインコードを入れる方法\n\nチャンク内のRコードは独立した段落にコードと結果が両方出力されます。一方、インラインコードは文中に結果のみ出力されます。\n\n### チャンクの基本的な書き方\n\nチャンクが始まるとの宣言は `{r}、終わるとの宣言は` です。つまり、{r} と ちょんちょんの間にRコードを入れるだけです。前の方にも書きました。\n\n\"Hello World!\"を出力するコード\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprint(\"Hello World!\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Hello World!\"\n```\n\n\n:::\n:::\n\n\n### インラインコード\n\nインラインコードの基本概念 他にもインラインコードを使って文中にRコードを埋め込むことも可能です。ただし、Rコードは出力されず、結果のみが出力されます。例えば、ベクトル X \\<- c(2, 3, 5, 7, 12) があり、この平均値を文中で示したいとしましょう。むろん、文中に「5.8」と直接書いても問題ありません。しかし、Xの入力ミスが見つかり、実は c(2, 3, 5, 7, 11) になったらどうでしょうか。この「5.8」と書いた箇所を見つけて「5.6」と修正しなければいけません。これは非常に面倒な作業であり、ミスも起こりやすいです。絶対やめましょう。\n\n-   インラインコードの利点\n\n文中に mean(X) の結果を埋め込めるならこういったミスを未然に防ぐことができ、文書のメンテナンスも楽になるでしょう。インラインコードの記法文中でRコードを入れるためには r と \\` の間にRコードを入力すれば良いです。\n\n\n::: {.cell}\n\n:::\n\n\nこうかけばいいのです。\n\n\n::: {.cell}\n\n```{.markdown .cell-code}\nmean(X)の実行結果：`r mean(X)`\n```\n:::\n\n\n出力は以下\n\nmean(X)の実行結果：5.6\n\nコードスパンとインラインコードの違い mean(X) のように r でなく、単に \\`\\` だけで囲まれたコードは実行されません。文中に短いコードを入れたり、オブジェクト名を表記する際などに使う機能です。つまり、\n\n-   **`` `コード` ``** = コードを文字として見せるだけ\n-   **`` `R コード` ``** = コードを実行して結果を表示 （r コード）\n\n## チャンクオプション2\n\nオプションの基本構文\n\nここではチャンクに指定可能なオプションについて紹介します。実際は本記事で紹介する内容の十数倍のオプションが用意されていますが、あまりにも膨大すぎるため、ここではよく使う機能のみを紹介します。 チャンクオプションはチャンク内の最上段に #\\| 仮引数: 実引数 のように表記します。 基本例：\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#| eval: false\n1+1\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 2\n```\n\n\n:::\n:::\n\n\n`eval` は `true` か `false` の値が指定できます。evalは**「コードを実行するかどうか」**を決めるオプションです。\n\n### チャンク名とチャンク間依存関係\n\n#### チャンク名の指定\n\nチャンク名は `#| label: チャンク名` で指定します。これはチャンクに名前を付けるオプションですが、多くの場合分析に影響を与えることはありません（それでもチャンク名は指定することを強く推奨します）。\n\nラベルの例は以下の通り。\n\n\n::: {.cell}\n\n```{.r .cell-code}\n1+1\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 2\n```\n\n\n:::\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n1+1\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 2\n```\n\n\n:::\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n1+1\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 2\n```\n\n\n:::\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n1+1\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 2\n```\n\n\n:::\n:::\n\n\n#### cacheオプションの活用\n\nこのチャンク名が重要となるのは `cache` オプションを付ける場合です。\n\n`cache` オプションは処理結果を保存しておくことを意味します。チャンク内のコードはrenderする度に計算されますが、演算にかなりの時間を必要とするコードが含まれている場合、renderの時間も長くなります。\n\n\n::: {.cell}\n\n```{.r .cell-code}\n1+1\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 2\n```\n\n\n:::\n:::\n\n\n時間のかかる処理`cache: true` オプションを付けておくと、最初のrender時に結果を別途のファイルとして保存しておき、次回からはその結果を読み込むだけとなります。**基本的にはこのオプションはおすすめしない。**\n\n### コードまたは結果の表示/非表示\n\n次は「コードだけ見せたい」、「結果だけ見せたい」場合に使うオプションを紹介します。これは技術書、授業用資料、スライドでよく使う機能です。\n\n#### 主要な表示制御オプション\n\n| オプション | 説明                       | デフォルト値 |\n|:-----------|:---------------------------|:-------------|\n| `echo`     | コードの出力有無           | `true`       |\n| `eval`     | コードの実行有無           | `true`       |\n| `include`  | コードと結果両方の表示有無 | `true`       |\n\n#### 使用例\n\n**コードのみ出力（実行なし）：**\n\n\n::: {.cell}\n\n```{.r .cell-code}\nこのコードは表示されるが実行されない\n```\n:::\n\n\n**結果のみ出力（コード非表示）：**\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n  Sepal.Length    Sepal.Width     Petal.Length    Petal.Width   \n Min.   :4.300   Min.   :2.000   Min.   :1.000   Min.   :0.100  \n 1st Qu.:5.100   1st Qu.:2.800   1st Qu.:1.600   1st Qu.:0.300  \n Median :5.800   Median :3.000   Median :4.350   Median :1.300  \n Mean   :5.843   Mean   :3.057   Mean   :3.758   Mean   :1.199  \n 3rd Qu.:6.400   3rd Qu.:3.300   3rd Qu.:5.100   3rd Qu.:1.800  \n Max.   :7.900   Max.   :4.400   Max.   :6.900   Max.   :2.500  \n       Species  \n setosa    :50  \n versicolor:50  \n virginica :50  \n                \n                \n                \n```\n\n\n:::\n:::\n\n\n**コードと結果を両方隠す：**\n\n\n\nパッケージの読み込みコードやメタ変数の作成の際に `include: false` は有用なオプションです。\n\n### プロット関連オプション\n\n既に見てきた通り、Quartoは作図の結果も出力してくれます。図のサイズや解像度を変えることもできます。\n\n#### プロット関連の主要オプション\n\n| オプション名 | 説明 | 値の例 |\n|:---|:---|:---|\n| `fig-height` | 図の高さ（インチ） | 数値 |\n| `fig-width` | 図の幅（インチ） | 数値 |\n| `fig-align` | 図の位置 | \"left\", \"center\", \"right\" |\n| `fig-cap` | 図のキャプション | 文字列 |\n| `dpi` | 図の解像度（印刷用なら300以上を推奨） | 数値 |\n\n#### 実用例\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlibrary(ggplot2)\nlibrary(dplyr)\n\niris %>%\n  mutate(Species2 = recode(Species,\n                           \"setosa\"     = \"セトナ\",\n                           \"versicolor\" = \"バーシクル\",\n                           \"virginica\"  = \"バージニカ\")) %>%\n  ggplot() +\n  geom_point(aes(x = Sepal.Length, y = Sepal.Width, color = Species2)) +\n  labs(x = \"萼片の長さ (cm)\", y = \"萼片の幅 (cm)\", color = \"品種\") +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![`iris`データセットの可視化](Markdown記法1_files/figure-html/unnamed-chunk-13-1.svg){fig-align='center'}\n:::\n:::\n\n\n### コードの見栄えを整える\n\n#### tidyオプション\n\n自分だけが見るコードなら別に推奨されない書き方でも問題ないかもしれませんが、Quarto文書は他人と共有するケースが多いため、読みやすいコードを書くのも大事でしょう。\n\nここで便利なオプションが `tidy` オプションです。`tidy: true` を加えると、自動的にコードを読みやすい形に調整してくれます。\n\n#### tidyオプションの効果\n\n**tidy: false（デフォルト）の場合：**\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfor(i in 1:10){\nprint(i*2)\n}\n```\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfor (i in 1:10) {\n    print(i * 2)\n}\n```\n:::\n\n\nR Quartoでのデータ分析レポート作成において、Markdownの適切な使用は以下のメリットをもたらします：\n\n1.  **構造化された文書**：見出しとセクションで論理的な流れを作成\n\n2.  **美しい数式表示**：LaTeX記法による専門的な数式表現\n\n3.  **効果的な表現**：テーブル、リスト、引用による情報整理\n\n4.  **再現可能性**：コードと文章の統合による透明性の確保\n\nこれらの記法を活用して、読みやすく、理解しやすいデータ分析レポートを作成しましょう。\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}
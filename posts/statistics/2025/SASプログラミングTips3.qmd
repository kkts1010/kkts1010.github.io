---
title: "Good Programming Practices in Clnical Trial "
author: "坂本航太"
categories: [SAS,解析プログラミング]
date-modified: "2025-06-24"
abstract-title: Abstract
abstract: ""
date: "2025-06-25"
---

# 2006年のWeb記事についてです。

引用：

-   [Good Programming Practices in Clinical Trial – a Check Program ](https://www.lexjansen.com/pharmasug/2006/ApplicationsDevelopment/AD17.pdf)

Abstract

-   Large pharmaceutical companies typically have many programmers, data managers and statisticians producing trial
    analysis and reporting programs. Each of these has their own style in programming. Unfortunately, such a large
    variety in program styles can lead to problems in the quality, readability, verifiability and maintainability of the program
    code.

-   Establishing a central standard, or guideline, for good programming practices (GPP) is therefore a necessary first
    step for large companies. By requiring all programs to meet the GPP guideline, we can insure that we produce high
    quality programs that are easily readable by others, can be verified easily and can be easily maintained.

ということで、MUST DO、MUST NOT DO、AVOID、RECCOMENTを組織として決めたら良い。

| カテゴリ | 説明 |
|---------------------------------------------|---------------------------|
| **MUST DO** | These requirements for coding style and techniques **must** be met in the program. |
| **MUST NOT DO** | The styles and techniques in this category **must not** be used in the program. |
| **AVOID** | The styles and techniques items in this category **should not** be used in the program. |
| **RECOMMEND** | The styles and techniques items in this category **should be** used in order to promote good readability, verifiability, maintainability and efficiency |

## Must Do and Must Not Do Categories

### MUST DO

| 項目 |
|------------------------------------------------------------------------|
| Make a backup copy of the program prior to updates (Not checked by the program). |
| Use program documentation, e.g. Headers and Comments. Write documentation in English. Imbedded comments within the body of the program code should detail the modular flow. |
| Typically, write only one SAS® statement per line. |
| Use indentation to arrange the code clearly. |
| Use unique names for datasets and files within the program / macro. |
| Reference datasets and/or files explicitly in each step or proc. |
| Display 'Draft' in the output before program validation. |
| Reset global options to original settings – if changed by the program / macro. |
| Delete all temporary datasets after program execution. |
| Use 'RUN;' or 'QUIT;' at the end of each data step / proc. |
| Use defensive coding. |
| Display the name of the program on the output when running outside of RAGE (our document control system). |
| Optimize the data. Do not re-read data. |

### MUST NOT DO

| 項目 |
|------------------------------------------------------------------------|
| Hard-Code data. |
| Manually edit output. |
| Overwrite input data. |
| Use macro names that are already used by CARE Standard macros (our standardized reporting macros) |
| Use of SAS® keywords for dataset and variable names. |

Any programmers that have supported clinical trial analysis and reporting understand the complexity of
derived datasets that are ready to produce tables and graphs for efficacy and safety analysis. Taking data
from several domains, many-to-many merging, transposing data, imputing dates and values, averaging within
visits for duplicate results, and creating intermediate datasets for the final ADaM are more complex than we
expect.

## 参考

-   [Challenges in Implementing ADaM datasets: Balancing the Analysis-Ready and Traceability Concepts](https://www.lexjansen.com/pharmasug/2011/CD/PharmaSUG-2011-CD19.pdf)
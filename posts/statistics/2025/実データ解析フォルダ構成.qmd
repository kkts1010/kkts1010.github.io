---
title: "利用しない：臨床研究のための実データ解析フォルダ構成"
author: "坂本航太"
categories: [博士課程]
date-modified: "2025-07-13"
abstract-title: Abstract
abstract: ""
date: "2025-07-13"
---

# 臨床研究のための実データ解析フォルダ構成：透明性と再現性を最大化するプロが教える秘訣

# 使わない。

研究者の皆さん、日々の臨床研究におけるデータ解析、お疲れ様です。膨大なデータと複雑な解析プロセスの中で、「あのデータ、どこにあったっけ？」「この結果はどのバージョンのプログラムで出したんだっけ？」といった混乱に直面した経験はありませんか？特に臨床研究では、解析の**透明性、再現性、そして監査に耐えうる品質**が極めて重要になります。

今回は、そんな悩みを解決するために、私がこれまでの経験から導き出した「臨床研究の実データ解析に特化した理想的なフォルダ構成」をご紹介します。シミュレーション研究で培ったノウハウも活かしつつ、**ログ管理**や**構造定義書**の重要性、さらには**ミーティングでの効率的な進捗報告**までを考慮に入れた、まさに「プロが使う」ための設計です。

この構成を導入することで、あなたの研究プロジェクトは劇的に整理され、より効率的かつ信頼性の高いものへと進化するでしょう。

## なぜフォルダ構成がそこまで重要なのか？

単なるファイルの整理術と侮ってはいけません。適切なフォルダ構成は、研究の品質と直結します。

-   **再現性:** いつ、誰が、どのデータとプログラムを使って、どんな結果を出したのかが明確になります。これは科学的根拠の基盤です。

-   **透明性:** データの前処理から解析、結果生成までの全プロセスが明確になり、共同研究者や査読者、監査担当者が容易に追跡できるようになります。

-   **効率性:** 目的のファイルに素早くアクセスでき、新しい解析の追加やデータ更新、論文執筆作業がスムーズに進みます。

-   **監査可能性:** 規制当局への提出が求められる臨床研究では、全てのステップが厳格に管理されている証拠となります。

それでは、具体的なフォルダ構成を見ていきましょう！

## これが理想形！臨床研究向けフォルダ構成

この構成は、研究のワークフロー全体を考慮し、データのライフサイクル、プログラム開発、ドキュメント管理、コミュニケーションまでを網羅しています。フォルダ名の先頭に数字を付けることで、常に論理的な順序で表示されるよう工夫しています。

```         
プロジェクトルート/
├── 00_Resources/           # 勉強した教材、参考文献、参考資料など
├── 01_Docs/                # ドキュメント関連（研究計画書、構造定義書など）
│   ├── 01_Protocol/        # 研究計画書
│   ├── 02_Specs/           # 各種仕様書（データ定義書、ADS構造定義書、TLFモックアップ）
│   └── 03_SAP/             # 統計解析計画書（SAP）
├── 02_Data/                # データ関連
│   ├── 01_Raw/             # 生データ（変更不可）
│   └── 02_External/        # 外部参照データ（辞書、マスタなど）
├── 03_Programs/            # プログラム関連
│   ├── 01_ADS/             # 解析用データセット（ADS）作成プログラム
│   │   ├── Develop/        # 開発中のプログラム
│   │   └── Final/          # 確定版プログラム
│   ├── 02_TLF/             # 解析およびTLF作成プログラム
│   │   ├── Develop/        # 開発中のプログラム
│   │   └── Final/          # 確定版プログラム
│   └── 03_Macros_Functions/# 共通マクロ、関数
├── 04_Output/              # 出力物関連
│   ├── 01_Logs/            # 全てのプログラム実行ログ
│   ├── 02_ADS/             # 作成された解析用データセット
│   ├── 03_TLF/             # Table, Listing, Figure（最終成果物）
│   │   ├── YYYYMMDD/       # 解析実行日ごとの出力フォルダ
│   │   │   ├── Tables/
│   │   │   ├── Listings/
│   │   │   └── Figures/
│   └── 04_Interim_Output/  # その他中間出力、一時ファイル、探索的解析結果など
├── 05_Paper/               # 論文執筆関連
│   ├── Drafts/             # 論文ドラフト
│   ├── Figures_Tables_Final/# 論文に掲載する最終版の図表
│   └── References/         # 参考文献管理
├── 06_Meeting/             # 会議関連（ミーティング議事録、進捗報告など）
│   ├── YYYYMMDD_MeetingTitle/# 日付とミーティング名ごとのフォルダ
│   └── Shared_Materials/   # 共有資料、テンプレートなど
└── renv/                   # (Rの場合) Rパッケージ管理
```

## 各フォルダの役割と運用のコツを徹底解説！

それぞれのフォルダには明確な役割があります。適切に使い分けることで、プロジェクト全体が整理され、将来の自分や共同研究者が困ることがなくなります。

### 00_Resources/：研究の「知識ベース」

このフォルダは、シミュレーション研究と同様に、あなたの研究活動を支える**背景知識や参考資料**を格納します。新しい統計手法の論文、Rパッケージの使い方メモ、講義ノートなど、直接データやプログラムに関わらなくても、研究の理解を深めるために不可欠な情報を整理しておきましょう。

### 01_Docs/：研究の「骨格」と「仕様書」

プロジェクトの公式ドキュメントを集約する場所です。特に「構造定義書」がここに位置します。

-   **`01_Protocol/`**: **研究計画書 (Protocol)** を保管します。これらは、解析の根拠となる最重要ドキュメントであり、常に最新版を明確にしておく必要があります。

-   **`02_Specs/`**: ここが「構造定義書」の中心です。生データ、前処理済みデータ、そして解析用データセット（ADS）の**変数定義、ラベル、フォーマット、許容値、欠損値**などを記述します。SASの場合は、この定義書から`ATTRIB`や`PROC FORMAT`で利用するSASコードを自動生成できるよう設計すると、効率が格段に上がります。作成するTable, Listing, Figure (TLF) のモックアップもここに置きます。

-   **`03_SAP/`**: **統計解析計画書 (SAP)** を保管します。以前の `03_Reports` から独立させ、解析の根幹となるドキュメントであることを明確にしました。

### 02_Data/：データの「聖域」と「加工履歴」

データの**トレーサビリティ**を確保するための最も重要なフォルダです。

-   **`01_Raw/`**: 外部から受け取った**オリジナルの生データ**を**一切変更せずに**格納します。データ受領時のハッシュ値なども記録しておくと、データの完全性を保証できます。

-   **`03_External/`**: コーディング辞書（MedDRAなど）や外部基準値など、外部から参照するデータはここに置きます。これらのデータも**バージョン管理**を徹底しましょう。

### 03_Programs/：プログラムの「開発」と「確定」

プログラムの**バージョン管理と変更履歴**を明確にするための場所です。

-   **`01_ADS/`**: **解析用データセット（ADS）を作成するプログラム**です。

    -   **`Develop/YYYYMMDD/`**: 日々の試行錯誤や修正を行う際の**開発中のプログラム**を日付ごとに整理します。

    -   **`Final/vX.Y/`**: 品質管理（QC）をパスし、**最終確定したADS作成プログラム**をADSのバージョン（例: `v1.0`）に対応させて格納します。

-   **`02_TLF/`**: **解析を実行し、Table, Listing, Figure (TLF) を作成するプログラム**です。ADS作成プログラムと同様に、`Develop/YYYYMMDD/` と `Final/vX.Y/` で管理します。

-   **`03_Macros_Functions/`**: プロジェクト全体で共通利用するマクロや関数をまとめます。`04_Utilities/` は削除し、補助的なスクリプトは必要に応じて`Develop`フォルダ内や`03_Macros_Functions`に含める運用を想定します。

### 04_Output/：解析結果の「証拠」と「成果物」

解析結果と、それを生成した**全ての証拠（ログ）を体系的に保存**する場所です。

-   **`01_Logs/`**: 全てのプログラム実行ログを、**実行日時が分かるファイル名で日付フォルダ（`YYYYMMDD/`）内に保存**します。ログにはプログラムの開始/終了時間、使用データ、エラーや警告の有無などを明確に記録し、何か問題が起きた際に迅速に原因を特定できるようにします。

-   **`02_ADS/vX.Y/`**: `03_Programs/01_ADS/Final/vX.Y/` のプログラムで生成された**最終確定版のADS**を、バージョンごとに格納します。

-   **`03_TLF/YYYYMMDD/`**: `03_Programs/02_TLF/Final/` のプログラムで生成された**最終的なTable, Listing, Figure**を、解析実行日ごとに保存します。最終的なTLFには、使用したADSやプログラムのバージョン、作成日時などの情報がフッターやコメントとして埋め込まれていると完璧です。

-   **`04_Interim_Output/`**: 中間的な出力ファイル、一時ファイル、探索的データ解析の結果、品質管理のチェックリストやサマリー結果など、最終報告書には含まれないが保存しておきたい出力物を格納します。

### 05_Paper/：論文執筆の「基地」

論文執筆に特化したフォルダです。

-   **`Drafts/`**: 論文のドラフト版を保存します。Word、Quarto (`.qmd`)、LaTeXファイルなど、使用ツールに応じて格納してください。

-   **`Figures_Tables_Final/`**: 論文に実際に掲載する**最終版の図表**を高品質なフォーマット（PDF、TIFFなど）で保存します。これらは`04_Output/03_TLF/` から厳選されたものになります。

-   **`References/`**: 参考文献管理ファイル（BibTeXファイルなど）や、関連論文のPDFなどを格納します。

### 06_Meeting/：議論の「記録」と「進捗」

会議に関する全ての資料を体系的に管理します。特に、Quartoでの進捗報告を効率的に行うための工夫があります。

-   **`YYYYMMDD_MeetingTitle/`**: **日付とミーティングタイトル**を組み合わせたフォルダを、各ミーティングごとに作成します。このフォルダ直下に、議題、議事録（.docx, .pdfなど）、**Quarto (`.qmd`) 形式の進捗報告書ソースファイル**、そしてその`.qmd`ファイルからレンダリングされた出力ファイル（.html, .pdfなど）など、そのミーティングに関連する全ての資料を格納します。

-   **`Shared_Materials/`**: プロジェクト全体で共有されるミーティングテンプレートや共通のガイドライン、過去の参考資料など、特定のミーティングに紐づかない汎用的な資料を置きます。

## Rで一発作成！フォルダ自動生成テンプレートと使用例

この理想的なフォルダ構成を、Rのスクリプトでサクッと自動生成しちゃいましょう！以下のコードをRコンソールに貼り付けるか、新しい `.R` ファイルとして保存して実行するだけです。`renv` を使用しない設定 (`use_renv = FALSE`) での具体的な使用例も示しますね。

``` {.r eval="FALSE," code-line-numbers="true," code-overflow="wrap"}
#' 臨床研究における実データ解析プロジェクトのフォルダ構造を自動生成する関数
#'
#' @param project_name 作成するプロジェクトのルートフォルダ名
#' @param use_renv renvパッケージを使用するかどうか (TRUE/FALSE)
#'
#' @return なし。指定されたパスにフォルダ構造を作成します。
#' @export
create_clinical_data_analysis_project_structure <- function(project_name, use_renv = TRUE) {
  # プロジェクトルートのパスを設定 (現在の作業ディレクトリに作成)
  project_path <- file.path(getwd(), project_name)

  # ルートフォルダの作成
  if (dir.exists(project_path)) {
    stop(paste0("フォルダ '", project_path, "' は既に存在します。別の名前を指定するか、既存のフォルダを削除してください。"))
  }
  dir.create(project_path, recursive = TRUE)
  message(paste0("プロジェクトルートフォルダ '", project_path, "' を作成しました。\n"))

  # サブフォルダの定義
  # Develop/YYYYMMDDやFinal/vX.Yは実行時に手動または別スクリプトで作成することを推奨
  sub_folders <- c(
    "00_Resources",
    "01_Docs/01_Protocol",
    "01_Docs/02_Specs",
    "01_Docs/03_SAP", # 変更
    "02_Data/01_Raw",
    "02_Data/02_External", # 変更 (Processed削除)
    "03_Programs/01_ADS/Develop", # 変更
    "03_Programs/01_ADS/Final",   # 変更
    "03_Programs/02_TLF/Develop", # 変更
    "03_Programs/02_TLF/Final",   # 変更
    "03_Programs/03_Macros_Functions", # 変更 (Utilities削除)
    "04_Output/01_Logs",
    "04_Output/02_ADS",
    "04_Output/03_TLF/Tables",
    "04_Output/03_TLF/Listings",
    "04_Output/03_TLF/Figures",
    "04_Output/04_Interim_Output",
    "05_Paper/Drafts",
    "05_Paper/Figures_Tables_Final",
    "05_Paper/References",
    "06_Meeting/Shared_Materials" # Meetingフォルダの初期作成
  )

  # サブフォルダの作成
  for (folder in sub_folders) {
    dir.create(file.path(project_path, folder), recursive = TRUE)
    message(paste0("  - フォルダ '", file.path(project_path, folder), "' を作成しました。\n"))
  }

  # renvの初期化
  if (use_renv) {
    message("renvの初期化を開始します。これには少し時間がかかる場合があります...\n")
    old_wd <- getwd()
    setwd(project_path)
    tryCatch({
      if (!requireNamespace("renv", quietly = TRUE)) {
        install.packages("renv")
      }
      renv::init()
      message("  - renvを初期化しました。\n")
      message("    プロジェクトルートに '.Rprofile' と 'renv.lock' が生成されます。\n")
    }, error = function(e) {
      message(paste0("  - renvの初期化中にエラーが発生しました: ", e$message, "\n"))
      message("    手動で `renv::init()` を実行してください。\n")
    }, finally = {
      setwd(old_wd)
    })
  }

  message(paste0("\nプロジェクト '", project_name, "' のフォルダ構造が正常に作成されました。"))
  if (use_renv) {
    message(paste0("RStudioで '", project_name, ".Rproj' を開いた後、`renv::restore()` を実行して必要なパッケージをインストールしてください。"))
  } else {
    message(paste0("RStudioで '", project_name, ".Rproj' を開いて作業を開始してください。"))
  }
  message("\n**補足:**")
  message("  - `03_Programs/01_ADS/Develop/`, `03_Programs/02_TLF/Develop/` フォルダ内は、ご自身で `YYYYMMDD/` 形式のサブフォルダを作成し、ファイルを整理してください。")
  message("  - `03_Programs/.../Final/` や `04_Output/02_ADS/` フォルダ内は、ADSやTLFのバージョンに応じて `vX.Y/` 形式のサブフォルダを作成し、ファイルを整理してください。")
  message("  - 各プログラムの実行ログは `04_Output/01_Logs/YYYYMMDD/` に、日付とタイムスタンプを含むファイル名で保存することを推奨します。")
  message("  - `01_Docs/02_Specs/` にデータ定義書やADS構造定義書を必ず作成してください。")
  message("  - `06_Meeting/` フォルダ内は、ミーティングごとに `YYYYMMDD_MeetingTitle/` 形式のサブフォルダを作成し、その直下に関連する全てのファイルを整理してください。特に `.qmd` ファイルとその出力もここに含めます。")
}
```

### 具体的な使用例（`renv = FALSE` の場合）

1.  **Rスクリプトの保存:** 上記のRコードを、例えば `create_project_structure.R` という名前で保存します。

2.  **プロジェクト作成場所への移動:** RコンソールまたはRStudioのターミナルで、新しいプロジェクトを作成したいディレクトリに移動します

``` {.r eval="FALSE,\" code-line-numbers"}
# 例：ホームディレクトリの「研究プロジェクト」フォルダに移動する場合
setwd("C:/Users/kotas/OneDrive/デスクトップ/Project")
```

3.  **関数の実行:** 作成したいプロジェクトの名前を指定して、`create_clinical_data_analysis_project_structure()` 関数を呼び出します。今回は `renv` を使わないので、`use_renv = FALSE` を設定します。

    ``` {.r eval="FALSE," code-line-numbers="true," code-overflow="wrap"}
    # 「MyClinicalStudy_2025」という名前のプロジェクトフォルダを作成し、renvは使用しない
    create_clinical_data_analysis_project_structure("ClinicalStudy", use_renv = FALSE)
    ```

4.  **結果の確認:** コマンドを実行すると、指定したディレクトリ内に `MyClinicalStudy_2025/` という新しいフォルダが作成され、その中に上記のフォルダ構造が自動的に生成されているのが確認できるはずです。Rコンソールには、フォルダ作成の進行状況と完了メッセージが表示されます。

これで、すぐにプロジェクト作業に取りかかれる、クリーンで整理された環境が手に入ります。

## まとめ：あなたの研究を次のレベルへ

このフォルダ構成は、単なるファイルの置き場所ではありません。臨床研究におけるデータ解析の**透明性、再現性、そして監査可能性**を飛躍的に向上させるための、体系的なワークフローそのものです。

-   **`00_Resources`**: 知識の蓄積を忘れずに。

-   **`01_Docs`**: **構造定義書**と\*\*統計解析計画書（SAP）\*\*が解析の羅針盤。

-   **`02_Data`**: 生データは「聖域」、加工履歴を明確に。

-   **`03_Programs`**: **ADS**と**TLF**作成プログラムを明確に分離し、開発と確定を分けて管理。

-   **`04_Output`**: **ログ**こそが解析結果の揺るぎない証拠。

-   **`05_Paper`**: 論文執筆をスムーズに。

-   **`06_Meeting`**: **Quarto**を活用し、ミーティングでの進捗報告も効率的かつ明確に。

このテンプレートを活用して、あなたの臨床研究プロジェクトをより強固で、信頼性の高いものにしていきましょう！もし具体的な解析作業で疑問が生じたら、いつでも聞いてくださいね。